#!/usr/bin/python3
#
# The Qubes OS Project, http://www.qubes-os.org
#
# Copyright (C) 2010  Rafal Wojtczuk  <rafal@invisiblethingslab.com>
#               2020  Norbert Kami≈Ñski  <norbert.kaminski@3mdeb.com>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA
#
import os
import os.path
import re
import sys
import subprocess
import shutil
import grp
import qubesadmin

FWUPD_DOM0_DIR = "/root/.cache/fwupd/"
FWUPD_DOM0_METADATA_DIR = FWUPD_DOM0_DIR + "metadata/"
FWUPD_DOM0_METADATA_SIGNATURE = FWUPD_DOM0_METADATA_DIR + "firmware.xml.gz.asc"
FWUPD_DOM0_METADATA_FILE = FWUPD_DOM0_METADATA_DIR + "firmware.xml.gz"
FWUPD_DOM0_UPDATES_DIR = FWUPD_DOM0_DIR + "updates/"
FWUPD_ERROR_FILE = FWUPD_DOM0_DIR + "errors"
FWUPD_UPDATEVM_DIR = "/home/user/.cache/fwupd/"
FWUPD_UPDATEVM_METADATA_DIR = FWUPD_UPDATEVM_DIR + "metadata/"
FWUPD_UPDATEVM_METADATA_SIGNATURE = FWUPD_UPDATEVM_METADATA_DIR + \
                                    "firmware.xml.gz.asc"
FWUPD_UPDATEVM_METADATA_FILE = FWUPD_UPDATEVM_METADATA_DIR + "firmware.xml.gz"
FWUPD_UPDATEVM_UPDATES_DIR = FWUPD_UPDATEVM_DIR + "updates/"

FWUPD_METADATA_FILES_REGEX = re.compile(
    r"^[A-Za-z0-9._+-]{1,128}\.xml\.gz$"
    )
FWUPD_METADATA_SIGNATURE_REGEX = re.compile(
    r"^[A-Za-z0-9._+-]{1,128}\.asc$"
    )
FWUPD_FIRMWARE_FILE_REGEX = re.compile(
    r"^[A-Za-z0-9._+-]{1,128}\.cab$"
    )
FWUPD_FIRMWARE_FLAG_REGEX = re.compile(
    r"^updateflag-[A-Za-z0-9]{1,128}.cab"
)
FWUPD_METADATA_FLAG_REGEX = re.compile(
    r"^metaflag"
)

# example valid outputs:
#  .....rpm: rsa sha1 (md5) pgp md5 OK
#  .....rpm: (sha1) dsa sha1 md5 gpg OK
#  .....rpm: digests signatures OK
# example INVALID outputs:
#  .....rpm: sha1 md5 OK
#  .....rpm: RSA sha1 ((MD5) PGP) md5 NOT OK (MISSING KEYS: (MD5) PGP#246110c1)
#  .....rpm: digests OK
GPG_OK_REGEX = re.compile(r": [a-z0-9() ]* (pgp|gpg|signatures) [a-z0-9 ]*OK$")


def fwupdates_fatal(msg):
    print(msg, file=sys.stderr)
    with open(FWUPD_ERROR_FILE, "a") as updates_error_file_handle:
        updates_error_file_handle.write(msg + "\n")
    shutil.rmtree(FWUPD_DOM0_UPDATES_DIR)
    shutil.rmtree(FWUPD_DOM0_METADATA_DIR)
    exit(1)


def handle_fw_update(updatevm, filename):
    source = os.getenv("QREXEC_REMOTE_DOMAIN")
    if source != updatevm.name:
        print('Domain ' + str(source) + ' not allowed to send dom0 updates',
              file=sys.stderr)
        exit(1)
    if os.path.exists(FWUPD_ERROR_FILE):
        os.remove(FWUPD_ERROR_FILE)
    qubes_gid = grp.getgrnam('qubes').gr_gid
    old_umask = os.umask(0o002)
    os.mkdir(FWUPD_DOM0_UPDATES_DIR)
    os.chown(FWUPD_DOM0_UPDATES_DIR, -1, qubes_gid)
    os.chmod(FWUPD_DOM0_UPDATES_DIR, 0o0775)

    CMD = "/usr/bin/qvm-run --pass-io "
    CMD += source
    CMD += " 'cat %s' > " % fwupd_metadata_update_file
    CMD += FWUPD_UPDATES_DIR + fwupd_update_file_name

    try:
        os.system(CMD)
        # Verify received files
        for untrusted_f in os.listdir(FWUPD_UPDATES_DIR):
            if not fwupd_update_files_regex.match(untrusted_f):
                raise Exception(
                                'Domain ' + source + ' sent unexpected file')
        f = untrusted_f
        assert '/' not in f
        assert '\0' not in f
        assert '\x1b' not in f

        full_path = FWUPD_UPDATES_DIR + "/" + f
        if os.path.islink(full_path) or not os.path.isfile(full_path):
            raise Exception(
                            'Domain ' + source + ' sent not regular file')
        # TO DO fwupd update files verification
        print("FILE NOT VERIFIED!!!")
    except Exception as e:
        fwupdates_fatal(str(e))
    os.umask(old_umask)
    exit(0)


def handle_metadata_update(updatevm):
    source = os.getenv("QREXEC_REMOTE_DOMAIN")
    if source != updatevm.name:
        print('Domain ' + str(source) + ' not allowed to send dom0 updates',
              file=sys.stderr)
        exit(1)
    if os.path.exists(FWUPD_ERROR_FILE):
        os.remove(FWUPD_ERROR_FILE)
    qubes_gid = grp.getgrnam('qubes').gr_gid
    old_umask = os.umask(0o002)
    os.mkdir(FWUPD_DOM0_METADATA_DIR)
    os.chown(FWUPD_DOM0_METADATA_DIR, -1, qubes_gid)
    os.chmod(FWUPD_DOM0_METADATA_DIR, 0o0775)

    cmd = "/usr/bin/qvm-run --pass-io "
    cmd += source
    cmd_sign = cmd + " 'cat %s' > " % FWUPD_METADATA_SIGNATURE
    cmd_sign = FWUPD_UPDATES_DIR + FWUPD_METADATA_SIGNATURE

    try:
        os.system(CMD)
        # Verify received files
        for untrusted_f in os.listdir(FWUPD_UPDATES_DIR):
            if not fwupd_update_files_regex.match(untrusted_f):
                raise Exception('Domain ' + source + ' sent unexpected file')
        f = untrusted_f
        assert '/' not in f
        assert '\0' not in f
        assert '\x1b' not in f

        full_path = FWUPD_UPDATES_DIR + "/" + f
        if os.path.islink(full_path) or not os.path.isfile(full_path):
            raise Exception('Domain ' + source + ' sent not regular file')
        # TO DO fwupd update files verification
        print("FILE NOT VERIFIED!!!")
    except Exception as e:
        fwupdates_fatal(str(e))
    os.umask(old_umask)
    exit(0)


def main():
    try:
        app = qubesadmin.Qubes()
        updatevm = app.updatevm
        if updatevm is None:
            exit(1)
        flag = [
                f for f in os.listdir(FWUPD_DIR)
                if FWUPD_FIRMWARE_FLAG_REGEX.match(f) or
                FWUPD_METADATA_FLAG_REGEX.match(f)
                ]
        if not len(flag):
            fwupdates_fatal("No flag mode has been set!!!")
        elif len(flag) >= 2:
            fwupdates_fatal("Invalid number of flags!!!")
        elif FWUPD_METADATA_FLAG_REGEX.match(flag[0]):
            handle_metadata_update(updatevm)
        elif FWUPD_FIRMWARE_FLAG_REGEX.match(flag[0]):
            handle_fw_update(updatevm, flag[0][11:])
    except Exception as e:
        fwupdates_fatal(str(e))


if __name__ == '__main__':
    main()
